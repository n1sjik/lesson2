package lesson1;

import java.util.Scanner;

public class FirstLesson {
//    комент создается  cmd + /
/*cmd + shift + /
    для многострочного комента*/
//    для создания точки входа в приложение  psvm
    public static void main(String[] args) {
//    для запуска нажать на зел. треугольник и выбрать run
        /*типы данных: 1) Примитивные типы данных
        *              2) ссылочные типы данных
        *
        *
        *  Примитивные типы данных
        * переменные: в памяти создается облась (присваевается имя(контейнер)) потом к ним можно обращаться
        * для java  обязательно указывать тип данных
        * типы целочисленных данных:
        * 1) byte  - 1 байт, используется для хранения данных (числа) от -128 до +127 для массивов и потоков данных*/
        byte byteVar;  // объявление переменной
        byte byteVar1, byteVar2;
        byte byteVar3 = 35; // объявление переменной и присвоение значения
        byte byteVar4 = 37, byteVar5 = 15;
//        '='  символ присваивания значения
//        переменные обозначаются с маленкой буквы(каждое послед слово с заглавной)
//        в переменных должен содержаться тип данных
//         ';' для завершения


        byteVar = 120;
//        присвоение значения ^
        /*2) short - 2 байта от -32768 до + 32767*/
        short shortVar = 300;
        short shortVar1 = 23000;
        short shortVar2 = 3000;
        //short shortVar3 = shortVar1 + shortVar2; результатом сложния типов шорт и байт будет int
        int shortVar3 = shortVar1 + shortVar2;

        //3) int - 4 байта популярный тип данных
        int intVar1 = 1000;
        int intVar2 = 2_000_000;
//        '_'  используется для удобства записи и чтения (при вычислениях не учитываются)

        //int zeroDivision = intVar1 / 0; при делении на 0 вываливает exeption

//      3) long - 8 байт если не влезло в int
        long longVAr = 30000000000000L; // 'L' явно указывает на тип лонг (можно ставить и заглавную и маленькую)
        // без 'L' запись воспринимается как int
        //long longVAr = 30000000000000


        // дробные типы данных

        // float - 4 байта необходимо указывать что это float
         float flaotVar = 5.7F;
         float floatVar1 = flaotVar / 0;
         // sout - вывод инфы в консоль
        System.out.println(floatVar1); // Infinity


        // double - 8 byte   современные jvm настроены по умолчанию на double
        double doubleVar = -3.12;
        double doubleVar1 = doubleVar / 0;
        System.out.println(doubleVar1); // -Infinity

//TODO: дома уточнить числа с плавающей точкой + уточнить почему нельзя полагаться точность вычислений

        // пометки TODO: для выделения текста
        // FIXME: то же самое


        // char - 2 байта
        // хранит номер символа в таблице unicode (UTF-8)
        // от 0 до 65536

        //boolean логический тип данных принимает 2 значения true / false
        boolean isActive = true;
        boolean isClosed = false;


        // приведение типов данных:
        // 1. автоматическое привидение типов
        byte byteVar6 = 10;
        int someInt = byteVar6;

        // 2. явное приведение типов
        someInt = 100;
        byteVar6 = (byte)someInt;
        // если идет преобразование на уменьшение контейнера то будет непредсказуемый результат.
        // (зависит от того как мы задаем переменную)


        // ОПераторы
        // операторы  присваивания
        // '=' / '+=' / '-=' / '*=' / '/=' / '%/' синтаксис только такой иначе ошибки

        int a = 10;
        a += 7; // увеличивает значение а на 7 а потом присваевает значение (равно а = а + 7)
        System.out.println(a);


        // арифметические операторы
        // '+', '-' , '*' , '/' , '%'
        // 7 % 2 = 1 остаток от деления
        // 7 / 2 = 3 целочисленное деление
        a = 12;
        int b = 7;
        int c = a / b;
        double c1 = a / b;
        System.out.println(c1);
        System.out.println(c);
        double c2 = (double)a / b;
        System.out.println(c2);

        // операторы сравнения
        // < / > / <= / >= / != (строго не равно) / ==  (строго равно)
        // результатом работы операторов сравнения будет либо true либо false


        //TODO  посмотрет как работает  инкремент (увеличивает на 1)!!!!!!
        // i++ (постфиксная форма) ++i (префиксная форма)
        a = 2;
        int aRes = a++ - ++a + a++ + a++ + a;
        System.out.println(aRes);

        // декремент (уменьшает на 1)
        // i--(постфиксная форма) --i(префиксная форма)




        // Консольный ввод и вывод
        // когда хотим вывести инфу в консоль
        // например sout
        System.out.println("выводимая инфа");
        // souf
        System.out.printf("форматированый вывод %s \n" , "данные");
        // %f для вывода чисел с плавающей запятой
        // %d для вывода целых чисел
        // %s для выводастрок
        // \n для перехода на след строку
        // все это высоконагруженая операция (затрагивает много ресурсов)

        //консольный ввод
        // первый способ
        Scanner in = new Scanner(System.in); // alt shift enter импортирование класса
        System.out.println("введите число");
        int num = in.nextInt();
        System.out.printf("Вы ввели %d\n" , num);
        System.out.println(num);
        // логические операторы
        // применяются к boolean переменным либо выражениям

        // && и
        // || или
        // ! не
        // ^  исключающее или
        //TODO системы исчислений двоичные и десятичные повторить

        // тернарный оператор
        // переменная = условие ? выражение 1 : выражение 2;
        // если условие истина то выражение 1 если ложно то выражение 2
        /*a = 2;
        b = 3;
        c = a < b ? a + b : a - b;
        System.out.println(c);*/

        int a1 = 23;
                c = a1 % 2 == 0 ? a1 / 2 : a1 * 2;
        System.out.println(c);

        



    }
}
